trigger:
- master

pool:
  vmImage: ubuntu-latest

variables:
  dockerRegistryServiceConnection: ConnectDockerHub
  imageRepository: k8b8nm
  containerRegistry: nemesys34
  repository: nemesys34/k8b8nm
  kubernetesServiceEndpoint: connectK8SNM2
  aksClusterName: K8B8NM

stages:
- stage: docker
  displayName: Docker Build and Push
  jobs:
  - job: BuildAndPush
    displayName: Build and push
    steps:
    # Récupération des déploiements du cluster
    - task: Kubernetes@1
      inputs:
        connectionType: Kubernetes Service Connection
        kubernetesServiceEndpoint: $(kubernetesServiceEndpoint)
        namespace: qal
        command: get
        arguments: deployments
      displayName: Get Deployments

    # Mise à jour des versions
    - task: Bash@3
      inputs:
        targetType: inline
        script: |
          versionrep=$(curl -sS "https://hub.docker.com/v2/repositories/$(imageRepository)/tags" | jq -r '."results"[0]["name"]')
          versionold=$(echo $KUBE_KUBECTLOUTPUT | jq '.items[1].spec.template.spec.containers[].image' | cut -d: -f2 | sed 's/"//')
          versionnew=$(awk -F\" '/^ver = "[0-9.]+"/{print $2}' azure-vote/main.py)
          echo "##vso[task.setvariable variable=vernew]$versionnew"
          echo "##vso[task.setvariable variable=verrep]$versionrep"
          sed -i 's/{{ version }}/'$versionnew'/g' manifest/vote-app.yml
      displayName: Mise à jour des versions

    # Construction et publication de l'image Docker
    - task: Docker@2
      inputs:
        containerRegistry: $(dockerRegistryServiceConnection)
        repository: $(repository)
        command: buildAndPush
        Dockerfile: "**/Dockerfile"
        tags: $(vernew)
      condition: ne(variables['verrep'], variables['vernew'])
      displayName: Build et Push

- stage: QAL_Deployment
  condition: succeeded()
  displayName: Deploy on QAL
  jobs:
  - job: QAL_Deploy
    displayName: Deploy on QAL
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    # Déploiement des ressources sur QAL
    - task: KubernetesManifest@0
      displayName: Deploy resources on QAL
      inputs:
        action: 'deploy'
        kubernetesServiceConnection: $(kubernetesServiceEndpoint)
        namespace: 'qal'
        manifests: manifest/vote-app.yml
    # Attendre 30 secondes pour que le déploiement soit effectif
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: 'sleep 30'
      displayName: Wait for deployment

    # Vérifier le statut du déploiement
    - task: Bash@3
      condition: succeeded()
      inputs:
        targetType: 'inline'
        script: |
          exitcode=$(curl -X POST -d "vote=Linux" http://brief8.uncia.fr -w "%{http_code}" -o /dev/null)
          echo "##vso[task.setvariable variable=exit]$exitcode"
      displayName: Test vote Linux

    # Test de charge
    - task: Bash@3
      condition: eq(variables['exit1'], '200')
      inputs:
        targetType: 'inline'
        script: |
          exitcode=$(curl -X POST -d "vote=Windows" http://brief8.uncia.fr -w "%{http_code}" -o /dev/null)
          echo "##vso[task.setvariable variable=exit2]$exitcode"
      displayName: Test vote Windows
    - task: Bash@3
      name : resettest
      displayName: Test de reset
      condition: eq(variables['exit2'],'200')
      inputs:
        targetType: 'inline'
        script: |
          exitcode=$(curl -X POST -d "vote=reset" http://brief8.uncia.fr -w "%{http_code}" -o /dev/null)
          echo "##vso[task.setvariable variable=exit3]$exitcode"
    - task: CmdLine@2
      name : chargetest
      displayName: Test de charge de la qal
      condition: eq(variables['exit3'],'200')
      inputs:
        script: |
          seq 250 | parallel --max-args 0  --jobs 20 "curl -k -iF 'vote=Linux' http://brief8.uncia.fr"
    # Attendre 90 secondes pour que les résultats des tests de charge soient disponibles
    - task: CmdLine@2
      inputs :
        script: 'sleep 90'
      displayName: Wait for load test results

    # Récupérer les pods QAL
    - task: Kubernetes@1
      inputs:
        connectionType: Kubernetes Service Connection
        kubernetesServiceEndpoint: $(kubernetesServiceEndpoint)
        namespace: 'qal'
        command: 'get'
        arguments: 'pods'
      displayName: Get QAL pods
      name: qalpods

    # Compter les pods
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          pod_count=$(echo $QALPODS_KUBECTLOUTPUT | jq '.items | length')
          echo "Number of pods: $pod_count"
          echo "##vso[task.setvariable variable=countpods]$pod_count"
      displayName: Count pods

    # Supprimer le déploiement QAL si le nombre de pods n'est pas égal à 2
    - task: Kubernetes@1
      name: deleteqal
      condition: ne(variables['countpods'], 2)
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: $(kubernetesServiceEndpoint)
        namespace: 'qal'
        command: 'delete'
        arguments: -f manifest/vote-app.yml
      displayName: Delete QAL deployment if pod count not equal to 2

    # Afficher un message si la suppression de QAL a été effectuée
    - task: Bash@3
      name: yourverygood
      condition: succeeded()
      inputs:
        targetType: 'inline'
        script: 'echo "QAL DELETION"'

- stage: 'Deploy_canary'
  condition: succeeded()
  displayName: 'Deploy Canary Release'
  jobs:
  - job: 'Deploy_canary'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: KubernetesManifest@0
      name: kubeonprodcanary
      condition: succeeded()
      inputs:
        action: 'deploy'
        kubernetesServiceConnection: $(kubernetesServiceEndpoint)
        namespace: 'prod'
        strategy: 'canary'
        percentage: '30'
        manifests: manifest/vote-app.yml
      displayName: Deploy Canary on Prod

- stage: 'Manual Intervention'
  displayName: 'Wait for validation of working canary release'
  condition: |
    and(
    eq(variables['Release.EnvironmentName'], 'canary'),
    eq(variables['Release.Reason'], 'Manual')
    )
  jobs:
  - job: 'waitForValidation'
    displayName: 'Wait for external validation before proceeding'
    pool:
      vmImage: 'ubuntu-latest'
    timeoutInMinutes: 4320 # job times out in 3 days
    steps:
    - task: ManualValidation@0
      timeoutInMinutes: 1440 # task times out in 1 day
      inputs:
        notifyUsers: 'simplon.nicolasmarty@gmail.com'
        instructions: 'Please validate the build configuration and resume'
        onTimeout: 'resume'
        failOnTimeout: true # fail the build if the validation times out
        condition: succeededOrFailed() # continue the pipeline if the validation fails
        continueOnError: true # continue the pipeline if there's an error during the validation

- stage: 'DeployOnProd'
  displayName: 'Deploy on Prod and delete Canary'
  jobs:
  - job: 'Deployonprod'
    displayName: 'Deploy on Prod and delete Canary'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Kubernetes@1
      name: deleteprodapp
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: $(kubernetesServiceEndpoint)
        namespace: 'prod'
        command: 'delete'
        arguments: manifest/vote-app.yml

    - task: Kubernetes@1
      name: deployprod
      condition: succeeded()
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: $(kubernetesServiceEndpoint)
        namespace: 'prod'
        command: 'apply'
        useConfigurationFile: true
        configuration: manifest/vote-app.yml
      displayName: Deploy on Prod

    - task: Bash@3
      name: yourdeployment
      condition: succeeded()
      inputs:
        targetType: 'inline'
        script: 'echo "DEPLOY TO PROD OK"'

- stage: 'PerformanceTest'
  condition: succeeded()
  dependsOn: 'DeployOnProd'
  displayName: 'Performance Test on Prod'
  jobs:
  - job: 'PerformanceTest'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Kubernetes@1
      inputs:
        connectionType: Kubernetes Service Connection
        kubernetesServiceEndpoint: $(kubernetesServiceEndpoint)
        namespace: 'prod'
        command: 'get'
        useConfigurationFile: true
        configuration: manifest/vote-app.yml
      displayName: Get Prod deployment

    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          ONPROD_OUTPUT=$(echo $(onprod.KubernetesCliOutput) | tr -d '\r')
          podcount=$(echo $ONPROD_OUTPUT | jq '.items | length')
          echo "Total number of production pods: $podcount"
          if [ "$podcount" -eq "0" ]; then
            echo "Error: No production pods found"
            exit 1
          fi
      displayName: Check production pod count

    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: 'sleep 30'
      displayName: Wait for load test results

    - task: CmdLine@2
      inputs:
        script: 'echo "Performance test on Prod completed."'
      displayName: Performance test results

- stage: 'Rollback'
  condition: failed()
  dependsOn: 'PerformanceTest'
  displayName: 'Rollback Deployment'
  jobs:
  - job: 'Rollback'
    displayName: 'Rollback Deployment'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Kubernetes@1
      inputs:
        connectionType: Kubernetes Service Connection
        kubernetesServiceEndpoint: $(kubernetesServiceEndpoint)
        namespace: 'prod'
        command: 'rollback'
        arguments: manifest/vote-app.yml
      displayName: Rollback deployment on Prod

    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: 'echo "Rollback completed."'
      displayName: Rollback status
